// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_types_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_types_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_types_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_types_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_types_2eproto;
namespace data_provider {
namespace protobuf {
class OptF;
struct OptFDefaultTypeInternal;
extern OptFDefaultTypeInternal _OptF_default_instance_;
class OptI;
struct OptIDefaultTypeInternal;
extern OptIDefaultTypeInternal _OptI_default_instance_;
class OptS;
struct OptSDefaultTypeInternal;
extern OptSDefaultTypeInternal _OptS_default_instance_;
class RptF;
struct RptFDefaultTypeInternal;
extern RptFDefaultTypeInternal _RptF_default_instance_;
class RptI;
struct RptIDefaultTypeInternal;
extern RptIDefaultTypeInternal _RptI_default_instance_;
class RptS;
struct RptSDefaultTypeInternal;
extern RptSDefaultTypeInternal _RptS_default_instance_;
}  // namespace protobuf
}  // namespace data_provider
PROTOBUF_NAMESPACE_OPEN
template<> ::data_provider::protobuf::OptF* Arena::CreateMaybeMessage<::data_provider::protobuf::OptF>(Arena*);
template<> ::data_provider::protobuf::OptI* Arena::CreateMaybeMessage<::data_provider::protobuf::OptI>(Arena*);
template<> ::data_provider::protobuf::OptS* Arena::CreateMaybeMessage<::data_provider::protobuf::OptS>(Arena*);
template<> ::data_provider::protobuf::RptF* Arena::CreateMaybeMessage<::data_provider::protobuf::RptF>(Arena*);
template<> ::data_provider::protobuf::RptI* Arena::CreateMaybeMessage<::data_provider::protobuf::RptI>(Arena*);
template<> ::data_provider::protobuf::RptS* Arena::CreateMaybeMessage<::data_provider::protobuf::RptS>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace data_provider {
namespace protobuf {

// ===================================================================

class OptI final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:data_provider.protobuf.OptI) */ {
 public:
  inline OptI() : OptI(nullptr) {}
  ~OptI() override;
  explicit constexpr OptI(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptI(const OptI& from);
  OptI(OptI&& from) noexcept
    : OptI() {
    *this = ::std::move(from);
  }

  inline OptI& operator=(const OptI& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptI& operator=(OptI&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptI& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kNull = 1,
    kValue = 2,
    KIND_NOT_SET = 0,
  };

  static inline const OptI* internal_default_instance() {
    return reinterpret_cast<const OptI*>(
               &_OptI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OptI& a, OptI& b) {
    a.Swap(&b);
  }
  inline void Swap(OptI* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptI* New() const final {
    return new OptI();
  }

  OptI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptI>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OptI& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OptI& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data_provider.protobuf.OptI";
  }
  protected:
  explicit OptI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNullFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .google.protobuf.NullValue null = 1;
  bool has_null() const;
  private:
  bool _internal_has_null() const;
  public:
  void clear_null();
  ::PROTOBUF_NAMESPACE_ID::NullValue null() const;
  void set_null(::PROTOBUF_NAMESPACE_ID::NullValue value);
  private:
  ::PROTOBUF_NAMESPACE_ID::NullValue _internal_null() const;
  void _internal_set_null(::PROTOBUF_NAMESPACE_ID::NullValue value);
  public:

  // int32 value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:data_provider.protobuf.OptI)
 private:
  class _Internal;
  void set_has_null();
  void set_has_value();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union KindUnion {
    constexpr KindUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    int null_;
    ::PROTOBUF_NAMESPACE_ID::int32 value_;
  } kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class OptF final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:data_provider.protobuf.OptF) */ {
 public:
  inline OptF() : OptF(nullptr) {}
  ~OptF() override;
  explicit constexpr OptF(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptF(const OptF& from);
  OptF(OptF&& from) noexcept
    : OptF() {
    *this = ::std::move(from);
  }

  inline OptF& operator=(const OptF& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptF& operator=(OptF&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptF& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kNull = 1,
    kValue = 2,
    KIND_NOT_SET = 0,
  };

  static inline const OptF* internal_default_instance() {
    return reinterpret_cast<const OptF*>(
               &_OptF_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OptF& a, OptF& b) {
    a.Swap(&b);
  }
  inline void Swap(OptF* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptF* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptF* New() const final {
    return new OptF();
  }

  OptF* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptF>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OptF& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OptF& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptF* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data_provider.protobuf.OptF";
  }
  protected:
  explicit OptF(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNullFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .google.protobuf.NullValue null = 1;
  bool has_null() const;
  private:
  bool _internal_has_null() const;
  public:
  void clear_null();
  ::PROTOBUF_NAMESPACE_ID::NullValue null() const;
  void set_null(::PROTOBUF_NAMESPACE_ID::NullValue value);
  private:
  ::PROTOBUF_NAMESPACE_ID::NullValue _internal_null() const;
  void _internal_set_null(::PROTOBUF_NAMESPACE_ID::NullValue value);
  public:

  // float value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:data_provider.protobuf.OptF)
 private:
  class _Internal;
  void set_has_null();
  void set_has_value();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union KindUnion {
    constexpr KindUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    int null_;
    float value_;
  } kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class OptS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:data_provider.protobuf.OptS) */ {
 public:
  inline OptS() : OptS(nullptr) {}
  ~OptS() override;
  explicit constexpr OptS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptS(const OptS& from);
  OptS(OptS&& from) noexcept
    : OptS() {
    *this = ::std::move(from);
  }

  inline OptS& operator=(const OptS& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptS& operator=(OptS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptS& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kNull = 1,
    kValue = 2,
    KIND_NOT_SET = 0,
  };

  static inline const OptS* internal_default_instance() {
    return reinterpret_cast<const OptS*>(
               &_OptS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OptS& a, OptS& b) {
    a.Swap(&b);
  }
  inline void Swap(OptS* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptS* New() const final {
    return new OptS();
  }

  OptS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OptS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OptS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data_provider.protobuf.OptS";
  }
  protected:
  explicit OptS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNullFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .google.protobuf.NullValue null = 1;
  bool has_null() const;
  private:
  bool _internal_has_null() const;
  public:
  void clear_null();
  ::PROTOBUF_NAMESPACE_ID::NullValue null() const;
  void set_null(::PROTOBUF_NAMESPACE_ID::NullValue value);
  private:
  ::PROTOBUF_NAMESPACE_ID::NullValue _internal_null() const;
  void _internal_set_null(::PROTOBUF_NAMESPACE_ID::NullValue value);
  public:

  // string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:data_provider.protobuf.OptS)
 private:
  class _Internal;
  void set_has_null();
  void set_has_value();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union KindUnion {
    constexpr KindUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    int null_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  } kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class RptI final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:data_provider.protobuf.RptI) */ {
 public:
  inline RptI() : RptI(nullptr) {}
  ~RptI() override;
  explicit constexpr RptI(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RptI(const RptI& from);
  RptI(RptI&& from) noexcept
    : RptI() {
    *this = ::std::move(from);
  }

  inline RptI& operator=(const RptI& from) {
    CopyFrom(from);
    return *this;
  }
  inline RptI& operator=(RptI&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RptI& default_instance() {
    return *internal_default_instance();
  }
  static inline const RptI* internal_default_instance() {
    return reinterpret_cast<const RptI*>(
               &_RptI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RptI& a, RptI& b) {
    a.Swap(&b);
  }
  inline void Swap(RptI* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RptI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RptI* New() const final {
    return new RptI();
  }

  RptI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RptI>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RptI& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RptI& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RptI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data_provider.protobuf.RptI";
  }
  protected:
  explicit RptI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated .data_provider.protobuf.OptI value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::data_provider::protobuf::OptI* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_provider::protobuf::OptI >*
      mutable_value();
  private:
  const ::data_provider::protobuf::OptI& _internal_value(int index) const;
  ::data_provider::protobuf::OptI* _internal_add_value();
  public:
  const ::data_provider::protobuf::OptI& value(int index) const;
  ::data_provider::protobuf::OptI* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_provider::protobuf::OptI >&
      value() const;

  // @@protoc_insertion_point(class_scope:data_provider.protobuf.RptI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_provider::protobuf::OptI > value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class RptF final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:data_provider.protobuf.RptF) */ {
 public:
  inline RptF() : RptF(nullptr) {}
  ~RptF() override;
  explicit constexpr RptF(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RptF(const RptF& from);
  RptF(RptF&& from) noexcept
    : RptF() {
    *this = ::std::move(from);
  }

  inline RptF& operator=(const RptF& from) {
    CopyFrom(from);
    return *this;
  }
  inline RptF& operator=(RptF&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RptF& default_instance() {
    return *internal_default_instance();
  }
  static inline const RptF* internal_default_instance() {
    return reinterpret_cast<const RptF*>(
               &_RptF_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RptF& a, RptF& b) {
    a.Swap(&b);
  }
  inline void Swap(RptF* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RptF* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RptF* New() const final {
    return new RptF();
  }

  RptF* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RptF>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RptF& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RptF& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RptF* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data_provider.protobuf.RptF";
  }
  protected:
  explicit RptF(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated .data_provider.protobuf.OptF value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::data_provider::protobuf::OptF* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_provider::protobuf::OptF >*
      mutable_value();
  private:
  const ::data_provider::protobuf::OptF& _internal_value(int index) const;
  ::data_provider::protobuf::OptF* _internal_add_value();
  public:
  const ::data_provider::protobuf::OptF& value(int index) const;
  ::data_provider::protobuf::OptF* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_provider::protobuf::OptF >&
      value() const;

  // @@protoc_insertion_point(class_scope:data_provider.protobuf.RptF)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_provider::protobuf::OptF > value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class RptS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:data_provider.protobuf.RptS) */ {
 public:
  inline RptS() : RptS(nullptr) {}
  ~RptS() override;
  explicit constexpr RptS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RptS(const RptS& from);
  RptS(RptS&& from) noexcept
    : RptS() {
    *this = ::std::move(from);
  }

  inline RptS& operator=(const RptS& from) {
    CopyFrom(from);
    return *this;
  }
  inline RptS& operator=(RptS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RptS& default_instance() {
    return *internal_default_instance();
  }
  static inline const RptS* internal_default_instance() {
    return reinterpret_cast<const RptS*>(
               &_RptS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RptS& a, RptS& b) {
    a.Swap(&b);
  }
  inline void Swap(RptS* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RptS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RptS* New() const final {
    return new RptS();
  }

  RptS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RptS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RptS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RptS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RptS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data_provider.protobuf.RptS";
  }
  protected:
  explicit RptS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated .data_provider.protobuf.OptS value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::data_provider::protobuf::OptS* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_provider::protobuf::OptS >*
      mutable_value();
  private:
  const ::data_provider::protobuf::OptS& _internal_value(int index) const;
  ::data_provider::protobuf::OptS* _internal_add_value();
  public:
  const ::data_provider::protobuf::OptS& value(int index) const;
  ::data_provider::protobuf::OptS* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_provider::protobuf::OptS >&
      value() const;

  // @@protoc_insertion_point(class_scope:data_provider.protobuf.RptS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_provider::protobuf::OptS > value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OptI

// .google.protobuf.NullValue null = 1;
inline bool OptI::_internal_has_null() const {
  return kind_case() == kNull;
}
inline bool OptI::has_null() const {
  return _internal_has_null();
}
inline void OptI::set_has_null() {
  _oneof_case_[0] = kNull;
}
inline void OptI::clear_null() {
  if (_internal_has_null()) {
    kind_.null_ = 0;
    clear_has_kind();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::NullValue OptI::_internal_null() const {
  if (_internal_has_null()) {
    return static_cast< ::PROTOBUF_NAMESPACE_ID::NullValue >(kind_.null_);
  }
  return static_cast< ::PROTOBUF_NAMESPACE_ID::NullValue >(0);
}
inline ::PROTOBUF_NAMESPACE_ID::NullValue OptI::null() const {
  // @@protoc_insertion_point(field_get:data_provider.protobuf.OptI.null)
  return _internal_null();
}
inline void OptI::_internal_set_null(::PROTOBUF_NAMESPACE_ID::NullValue value) {
  if (!_internal_has_null()) {
    clear_kind();
    set_has_null();
  }
  kind_.null_ = value;
}
inline void OptI::set_null(::PROTOBUF_NAMESPACE_ID::NullValue value) {
  _internal_set_null(value);
  // @@protoc_insertion_point(field_set:data_provider.protobuf.OptI.null)
}

// int32 value = 2;
inline bool OptI::_internal_has_value() const {
  return kind_case() == kValue;
}
inline bool OptI::has_value() const {
  return _internal_has_value();
}
inline void OptI::set_has_value() {
  _oneof_case_[0] = kValue;
}
inline void OptI::clear_value() {
  if (_internal_has_value()) {
    kind_.value_ = 0;
    clear_has_kind();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OptI::_internal_value() const {
  if (_internal_has_value()) {
    return kind_.value_;
  }
  return 0;
}
inline void OptI::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_value()) {
    clear_kind();
    set_has_value();
  }
  kind_.value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OptI::value() const {
  // @@protoc_insertion_point(field_get:data_provider.protobuf.OptI.value)
  return _internal_value();
}
inline void OptI::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:data_provider.protobuf.OptI.value)
}

inline bool OptI::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void OptI::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
inline OptI::KindCase OptI::kind_case() const {
  return OptI::KindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// OptF

// .google.protobuf.NullValue null = 1;
inline bool OptF::_internal_has_null() const {
  return kind_case() == kNull;
}
inline bool OptF::has_null() const {
  return _internal_has_null();
}
inline void OptF::set_has_null() {
  _oneof_case_[0] = kNull;
}
inline void OptF::clear_null() {
  if (_internal_has_null()) {
    kind_.null_ = 0;
    clear_has_kind();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::NullValue OptF::_internal_null() const {
  if (_internal_has_null()) {
    return static_cast< ::PROTOBUF_NAMESPACE_ID::NullValue >(kind_.null_);
  }
  return static_cast< ::PROTOBUF_NAMESPACE_ID::NullValue >(0);
}
inline ::PROTOBUF_NAMESPACE_ID::NullValue OptF::null() const {
  // @@protoc_insertion_point(field_get:data_provider.protobuf.OptF.null)
  return _internal_null();
}
inline void OptF::_internal_set_null(::PROTOBUF_NAMESPACE_ID::NullValue value) {
  if (!_internal_has_null()) {
    clear_kind();
    set_has_null();
  }
  kind_.null_ = value;
}
inline void OptF::set_null(::PROTOBUF_NAMESPACE_ID::NullValue value) {
  _internal_set_null(value);
  // @@protoc_insertion_point(field_set:data_provider.protobuf.OptF.null)
}

// float value = 2;
inline bool OptF::_internal_has_value() const {
  return kind_case() == kValue;
}
inline bool OptF::has_value() const {
  return _internal_has_value();
}
inline void OptF::set_has_value() {
  _oneof_case_[0] = kValue;
}
inline void OptF::clear_value() {
  if (_internal_has_value()) {
    kind_.value_ = 0;
    clear_has_kind();
  }
}
inline float OptF::_internal_value() const {
  if (_internal_has_value()) {
    return kind_.value_;
  }
  return 0;
}
inline void OptF::_internal_set_value(float value) {
  if (!_internal_has_value()) {
    clear_kind();
    set_has_value();
  }
  kind_.value_ = value;
}
inline float OptF::value() const {
  // @@protoc_insertion_point(field_get:data_provider.protobuf.OptF.value)
  return _internal_value();
}
inline void OptF::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:data_provider.protobuf.OptF.value)
}

inline bool OptF::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void OptF::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
inline OptF::KindCase OptF::kind_case() const {
  return OptF::KindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// OptS

// .google.protobuf.NullValue null = 1;
inline bool OptS::_internal_has_null() const {
  return kind_case() == kNull;
}
inline bool OptS::has_null() const {
  return _internal_has_null();
}
inline void OptS::set_has_null() {
  _oneof_case_[0] = kNull;
}
inline void OptS::clear_null() {
  if (_internal_has_null()) {
    kind_.null_ = 0;
    clear_has_kind();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::NullValue OptS::_internal_null() const {
  if (_internal_has_null()) {
    return static_cast< ::PROTOBUF_NAMESPACE_ID::NullValue >(kind_.null_);
  }
  return static_cast< ::PROTOBUF_NAMESPACE_ID::NullValue >(0);
}
inline ::PROTOBUF_NAMESPACE_ID::NullValue OptS::null() const {
  // @@protoc_insertion_point(field_get:data_provider.protobuf.OptS.null)
  return _internal_null();
}
inline void OptS::_internal_set_null(::PROTOBUF_NAMESPACE_ID::NullValue value) {
  if (!_internal_has_null()) {
    clear_kind();
    set_has_null();
  }
  kind_.null_ = value;
}
inline void OptS::set_null(::PROTOBUF_NAMESPACE_ID::NullValue value) {
  _internal_set_null(value);
  // @@protoc_insertion_point(field_set:data_provider.protobuf.OptS.null)
}

// string value = 2;
inline bool OptS::_internal_has_value() const {
  return kind_case() == kValue;
}
inline bool OptS::has_value() const {
  return _internal_has_value();
}
inline void OptS::set_has_value() {
  _oneof_case_[0] = kValue;
}
inline void OptS::clear_value() {
  if (_internal_has_value()) {
    kind_.value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_kind();
  }
}
inline const std::string& OptS::value() const {
  // @@protoc_insertion_point(field_get:data_provider.protobuf.OptS.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline void OptS::set_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_value()) {
    clear_kind();
    set_has_value();
    kind_.value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  kind_.value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:data_provider.protobuf.OptS.value)
}
inline std::string* OptS::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:data_provider.protobuf.OptS.value)
  return _s;
}
inline const std::string& OptS::_internal_value() const {
  if (_internal_has_value()) {
    return kind_.value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void OptS::_internal_set_value(const std::string& value) {
  if (!_internal_has_value()) {
    clear_kind();
    set_has_value();
    kind_.value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  kind_.value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OptS::_internal_mutable_value() {
  if (!_internal_has_value()) {
    clear_kind();
    set_has_value();
    kind_.value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return kind_.value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OptS::release_value() {
  // @@protoc_insertion_point(field_release:data_provider.protobuf.OptS.value)
  if (_internal_has_value()) {
    clear_has_kind();
    return kind_.value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void OptS::set_allocated_value(std::string* value) {
  if (has_kind()) {
    clear_kind();
  }
  if (value != nullptr) {
    set_has_value();
    kind_.value_.UnsafeSetDefault(value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:data_provider.protobuf.OptS.value)
}

inline bool OptS::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void OptS::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
inline OptS::KindCase OptS::kind_case() const {
  return OptS::KindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RptI

// repeated .data_provider.protobuf.OptI value = 1;
inline int RptI::_internal_value_size() const {
  return value_.size();
}
inline int RptI::value_size() const {
  return _internal_value_size();
}
inline void RptI::clear_value() {
  value_.Clear();
}
inline ::data_provider::protobuf::OptI* RptI::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:data_provider.protobuf.RptI.value)
  return value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_provider::protobuf::OptI >*
RptI::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:data_provider.protobuf.RptI.value)
  return &value_;
}
inline const ::data_provider::protobuf::OptI& RptI::_internal_value(int index) const {
  return value_.Get(index);
}
inline const ::data_provider::protobuf::OptI& RptI::value(int index) const {
  // @@protoc_insertion_point(field_get:data_provider.protobuf.RptI.value)
  return _internal_value(index);
}
inline ::data_provider::protobuf::OptI* RptI::_internal_add_value() {
  return value_.Add();
}
inline ::data_provider::protobuf::OptI* RptI::add_value() {
  ::data_provider::protobuf::OptI* _add = _internal_add_value();
  // @@protoc_insertion_point(field_add:data_provider.protobuf.RptI.value)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_provider::protobuf::OptI >&
RptI::value() const {
  // @@protoc_insertion_point(field_list:data_provider.protobuf.RptI.value)
  return value_;
}

// -------------------------------------------------------------------

// RptF

// repeated .data_provider.protobuf.OptF value = 1;
inline int RptF::_internal_value_size() const {
  return value_.size();
}
inline int RptF::value_size() const {
  return _internal_value_size();
}
inline void RptF::clear_value() {
  value_.Clear();
}
inline ::data_provider::protobuf::OptF* RptF::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:data_provider.protobuf.RptF.value)
  return value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_provider::protobuf::OptF >*
RptF::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:data_provider.protobuf.RptF.value)
  return &value_;
}
inline const ::data_provider::protobuf::OptF& RptF::_internal_value(int index) const {
  return value_.Get(index);
}
inline const ::data_provider::protobuf::OptF& RptF::value(int index) const {
  // @@protoc_insertion_point(field_get:data_provider.protobuf.RptF.value)
  return _internal_value(index);
}
inline ::data_provider::protobuf::OptF* RptF::_internal_add_value() {
  return value_.Add();
}
inline ::data_provider::protobuf::OptF* RptF::add_value() {
  ::data_provider::protobuf::OptF* _add = _internal_add_value();
  // @@protoc_insertion_point(field_add:data_provider.protobuf.RptF.value)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_provider::protobuf::OptF >&
RptF::value() const {
  // @@protoc_insertion_point(field_list:data_provider.protobuf.RptF.value)
  return value_;
}

// -------------------------------------------------------------------

// RptS

// repeated .data_provider.protobuf.OptS value = 1;
inline int RptS::_internal_value_size() const {
  return value_.size();
}
inline int RptS::value_size() const {
  return _internal_value_size();
}
inline void RptS::clear_value() {
  value_.Clear();
}
inline ::data_provider::protobuf::OptS* RptS::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:data_provider.protobuf.RptS.value)
  return value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_provider::protobuf::OptS >*
RptS::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:data_provider.protobuf.RptS.value)
  return &value_;
}
inline const ::data_provider::protobuf::OptS& RptS::_internal_value(int index) const {
  return value_.Get(index);
}
inline const ::data_provider::protobuf::OptS& RptS::value(int index) const {
  // @@protoc_insertion_point(field_get:data_provider.protobuf.RptS.value)
  return _internal_value(index);
}
inline ::data_provider::protobuf::OptS* RptS::_internal_add_value() {
  return value_.Add();
}
inline ::data_provider::protobuf::OptS* RptS::add_value() {
  ::data_provider::protobuf::OptS* _add = _internal_add_value();
  // @@protoc_insertion_point(field_add:data_provider.protobuf.RptS.value)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_provider::protobuf::OptS >&
RptS::value() const {
  // @@protoc_insertion_point(field_list:data_provider.protobuf.RptS.value)
  return value_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace data_provider

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_types_2eproto

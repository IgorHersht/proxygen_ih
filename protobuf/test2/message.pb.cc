// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace data_provider {
namespace protobuf {
constexpr RawCollatItem::RawCollatItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : i1_(nullptr)
  , i2_(nullptr)
  , f1_(nullptr)
  , f2_(nullptr)
  , s1_(nullptr)
  , s2_(nullptr)
  , vi1_(nullptr)
  , vf1_(nullptr)
  , vs1_(nullptr)
  , vs2_(nullptr){}
struct RawCollatItemDefaultTypeInternal {
  constexpr RawCollatItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RawCollatItemDefaultTypeInternal() {}
  union {
    RawCollatItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RawCollatItemDefaultTypeInternal _RawCollatItem_default_instance_;
}  // namespace protobuf
}  // namespace data_provider
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_message_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::data_provider::protobuf::RawCollatItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::data_provider::protobuf::RawCollatItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::data_provider::protobuf::RawCollatItem, i1_),
  PROTOBUF_FIELD_OFFSET(::data_provider::protobuf::RawCollatItem, i2_),
  PROTOBUF_FIELD_OFFSET(::data_provider::protobuf::RawCollatItem, f1_),
  PROTOBUF_FIELD_OFFSET(::data_provider::protobuf::RawCollatItem, f2_),
  PROTOBUF_FIELD_OFFSET(::data_provider::protobuf::RawCollatItem, s1_),
  PROTOBUF_FIELD_OFFSET(::data_provider::protobuf::RawCollatItem, s2_),
  PROTOBUF_FIELD_OFFSET(::data_provider::protobuf::RawCollatItem, vi1_),
  PROTOBUF_FIELD_OFFSET(::data_provider::protobuf::RawCollatItem, vf1_),
  PROTOBUF_FIELD_OFFSET(::data_provider::protobuf::RawCollatItem, vs1_),
  PROTOBUF_FIELD_OFFSET(::data_provider::protobuf::RawCollatItem, vs2_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, -1, sizeof(::data_provider::protobuf::RawCollatItem)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_provider::protobuf::_RawCollatItem_default_instance_),
};

const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmessage.proto\022\026data_provider.protobuf\032"
  "\013types.proto\"\377\003\n\rRawCollatItem\022-\n\002i1\030\001 \001"
  "(\0132\034.data_provider.protobuf.OptIH\000\210\001\001\022-\n"
  "\002i2\030\002 \001(\0132\034.data_provider.protobuf.OptIH"
  "\001\210\001\001\022-\n\002f1\030\003 \001(\0132\034.data_provider.protobu"
  "f.OptFH\002\210\001\001\022-\n\002f2\030\004 \001(\0132\034.data_provider."
  "protobuf.OptFH\003\210\001\001\022-\n\002s1\030\005 \001(\0132\034.data_pr"
  "ovider.protobuf.OptSH\004\210\001\001\022-\n\002s2\030\006 \001(\0132\034."
  "data_provider.protobuf.OptSH\005\210\001\001\022)\n\003vi1\030"
  "\007 \001(\0132\034.data_provider.protobuf.RptI\022)\n\003v"
  "f1\030\t \001(\0132\034.data_provider.protobuf.RptF\022)"
  "\n\003vs1\030\n \001(\0132\034.data_provider.protobuf.Rpt"
  "S\022)\n\003vs2\030\013 \001(\0132\034.data_provider.protobuf."
  "RptSB\005\n\003_i1B\005\n\003_i2B\005\n\003_f1B\005\n\003_f2B\005\n\003_s1B"
  "\005\n\003_s2b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_message_2eproto_deps[1] = {
  &::descriptor_table_types_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto = {
  false, false, 574, descriptor_table_protodef_message_2eproto, "message.proto", 
  &descriptor_table_message_2eproto_once, descriptor_table_message_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_message_2eproto::offsets,
  file_level_metadata_message_2eproto, file_level_enum_descriptors_message_2eproto, file_level_service_descriptors_message_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_message_2eproto_getter() {
  return &descriptor_table_message_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_message_2eproto(&descriptor_table_message_2eproto);
namespace data_provider {
namespace protobuf {

// ===================================================================

class RawCollatItem::_Internal {
 public:
  using HasBits = decltype(std::declval<RawCollatItem>()._has_bits_);
  static const ::data_provider::protobuf::OptI& i1(const RawCollatItem* msg);
  static void set_has_i1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::data_provider::protobuf::OptI& i2(const RawCollatItem* msg);
  static void set_has_i2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::data_provider::protobuf::OptF& f1(const RawCollatItem* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::data_provider::protobuf::OptF& f2(const RawCollatItem* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::data_provider::protobuf::OptS& s1(const RawCollatItem* msg);
  static void set_has_s1(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::data_provider::protobuf::OptS& s2(const RawCollatItem* msg);
  static void set_has_s2(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::data_provider::protobuf::RptI& vi1(const RawCollatItem* msg);
  static const ::data_provider::protobuf::RptF& vf1(const RawCollatItem* msg);
  static const ::data_provider::protobuf::RptS& vs1(const RawCollatItem* msg);
  static const ::data_provider::protobuf::RptS& vs2(const RawCollatItem* msg);
};

const ::data_provider::protobuf::OptI&
RawCollatItem::_Internal::i1(const RawCollatItem* msg) {
  return *msg->i1_;
}
const ::data_provider::protobuf::OptI&
RawCollatItem::_Internal::i2(const RawCollatItem* msg) {
  return *msg->i2_;
}
const ::data_provider::protobuf::OptF&
RawCollatItem::_Internal::f1(const RawCollatItem* msg) {
  return *msg->f1_;
}
const ::data_provider::protobuf::OptF&
RawCollatItem::_Internal::f2(const RawCollatItem* msg) {
  return *msg->f2_;
}
const ::data_provider::protobuf::OptS&
RawCollatItem::_Internal::s1(const RawCollatItem* msg) {
  return *msg->s1_;
}
const ::data_provider::protobuf::OptS&
RawCollatItem::_Internal::s2(const RawCollatItem* msg) {
  return *msg->s2_;
}
const ::data_provider::protobuf::RptI&
RawCollatItem::_Internal::vi1(const RawCollatItem* msg) {
  return *msg->vi1_;
}
const ::data_provider::protobuf::RptF&
RawCollatItem::_Internal::vf1(const RawCollatItem* msg) {
  return *msg->vf1_;
}
const ::data_provider::protobuf::RptS&
RawCollatItem::_Internal::vs1(const RawCollatItem* msg) {
  return *msg->vs1_;
}
const ::data_provider::protobuf::RptS&
RawCollatItem::_Internal::vs2(const RawCollatItem* msg) {
  return *msg->vs2_;
}
void RawCollatItem::clear_i1() {
  if (i1_ != nullptr) i1_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void RawCollatItem::clear_i2() {
  if (i2_ != nullptr) i2_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void RawCollatItem::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void RawCollatItem::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void RawCollatItem::clear_s1() {
  if (s1_ != nullptr) s1_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void RawCollatItem::clear_s2() {
  if (s2_ != nullptr) s2_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void RawCollatItem::clear_vi1() {
  if (GetArenaForAllocation() == nullptr && vi1_ != nullptr) {
    delete vi1_;
  }
  vi1_ = nullptr;
}
void RawCollatItem::clear_vf1() {
  if (GetArenaForAllocation() == nullptr && vf1_ != nullptr) {
    delete vf1_;
  }
  vf1_ = nullptr;
}
void RawCollatItem::clear_vs1() {
  if (GetArenaForAllocation() == nullptr && vs1_ != nullptr) {
    delete vs1_;
  }
  vs1_ = nullptr;
}
void RawCollatItem::clear_vs2() {
  if (GetArenaForAllocation() == nullptr && vs2_ != nullptr) {
    delete vs2_;
  }
  vs2_ = nullptr;
}
RawCollatItem::RawCollatItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:data_provider.protobuf.RawCollatItem)
}
RawCollatItem::RawCollatItem(const RawCollatItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_i1()) {
    i1_ = new ::data_provider::protobuf::OptI(*from.i1_);
  } else {
    i1_ = nullptr;
  }
  if (from._internal_has_i2()) {
    i2_ = new ::data_provider::protobuf::OptI(*from.i2_);
  } else {
    i2_ = nullptr;
  }
  if (from._internal_has_f1()) {
    f1_ = new ::data_provider::protobuf::OptF(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  if (from._internal_has_f2()) {
    f2_ = new ::data_provider::protobuf::OptF(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  if (from._internal_has_s1()) {
    s1_ = new ::data_provider::protobuf::OptS(*from.s1_);
  } else {
    s1_ = nullptr;
  }
  if (from._internal_has_s2()) {
    s2_ = new ::data_provider::protobuf::OptS(*from.s2_);
  } else {
    s2_ = nullptr;
  }
  if (from._internal_has_vi1()) {
    vi1_ = new ::data_provider::protobuf::RptI(*from.vi1_);
  } else {
    vi1_ = nullptr;
  }
  if (from._internal_has_vf1()) {
    vf1_ = new ::data_provider::protobuf::RptF(*from.vf1_);
  } else {
    vf1_ = nullptr;
  }
  if (from._internal_has_vs1()) {
    vs1_ = new ::data_provider::protobuf::RptS(*from.vs1_);
  } else {
    vs1_ = nullptr;
  }
  if (from._internal_has_vs2()) {
    vs2_ = new ::data_provider::protobuf::RptS(*from.vs2_);
  } else {
    vs2_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:data_provider.protobuf.RawCollatItem)
}

void RawCollatItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&i1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vs2_) -
    reinterpret_cast<char*>(&i1_)) + sizeof(vs2_));
}

RawCollatItem::~RawCollatItem() {
  // @@protoc_insertion_point(destructor:data_provider.protobuf.RawCollatItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RawCollatItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete i1_;
  if (this != internal_default_instance()) delete i2_;
  if (this != internal_default_instance()) delete f1_;
  if (this != internal_default_instance()) delete f2_;
  if (this != internal_default_instance()) delete s1_;
  if (this != internal_default_instance()) delete s2_;
  if (this != internal_default_instance()) delete vi1_;
  if (this != internal_default_instance()) delete vf1_;
  if (this != internal_default_instance()) delete vs1_;
  if (this != internal_default_instance()) delete vs2_;
}

void RawCollatItem::ArenaDtor(void* object) {
  RawCollatItem* _this = reinterpret_cast< RawCollatItem* >(object);
  (void)_this;
}
void RawCollatItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RawCollatItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RawCollatItem::Clear() {
// @@protoc_insertion_point(message_clear_start:data_provider.protobuf.RawCollatItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(i1_ != nullptr);
      i1_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(i2_ != nullptr);
      i2_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(f1_ != nullptr);
      f1_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(f2_ != nullptr);
      f2_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(s1_ != nullptr);
      s1_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(s2_ != nullptr);
      s2_->Clear();
    }
  }
  if (GetArenaForAllocation() == nullptr && vi1_ != nullptr) {
    delete vi1_;
  }
  vi1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && vf1_ != nullptr) {
    delete vf1_;
  }
  vf1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && vs1_ != nullptr) {
    delete vs1_;
  }
  vs1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && vs2_ != nullptr) {
    delete vs2_;
  }
  vs2_ = nullptr;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RawCollatItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .data_provider.protobuf.OptI i1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_i1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .data_provider.protobuf.OptI i2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_i2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .data_provider.protobuf.OptF f1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .data_provider.protobuf.OptF f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .data_provider.protobuf.OptS s1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_s1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .data_provider.protobuf.OptS s2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_s2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .data_provider.protobuf.RptI vi1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_vi1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .data_provider.protobuf.RptF vf1 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_vf1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .data_provider.protobuf.RptS vs1 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_vs1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .data_provider.protobuf.RptS vs2 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_vs2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawCollatItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_provider.protobuf.RawCollatItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .data_provider.protobuf.OptI i1 = 1;
  if (_internal_has_i1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::i1(this), target, stream);
  }

  // optional .data_provider.protobuf.OptI i2 = 2;
  if (_internal_has_i2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::i2(this), target, stream);
  }

  // optional .data_provider.protobuf.OptF f1 = 3;
  if (_internal_has_f1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::f1(this), target, stream);
  }

  // optional .data_provider.protobuf.OptF f2 = 4;
  if (_internal_has_f2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::f2(this), target, stream);
  }

  // optional .data_provider.protobuf.OptS s1 = 5;
  if (_internal_has_s1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::s1(this), target, stream);
  }

  // optional .data_provider.protobuf.OptS s2 = 6;
  if (_internal_has_s2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::s2(this), target, stream);
  }

  // .data_provider.protobuf.RptI vi1 = 7;
  if (this->_internal_has_vi1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::vi1(this), target, stream);
  }

  // .data_provider.protobuf.RptF vf1 = 9;
  if (this->_internal_has_vf1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::vf1(this), target, stream);
  }

  // .data_provider.protobuf.RptS vs1 = 10;
  if (this->_internal_has_vs1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::vs1(this), target, stream);
  }

  // .data_provider.protobuf.RptS vs2 = 11;
  if (this->_internal_has_vs2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::vs2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_provider.protobuf.RawCollatItem)
  return target;
}

size_t RawCollatItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_provider.protobuf.RawCollatItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .data_provider.protobuf.OptI i1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *i1_);
    }

    // optional .data_provider.protobuf.OptI i2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *i2_);
    }

    // optional .data_provider.protobuf.OptF f1 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

    // optional .data_provider.protobuf.OptF f2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional .data_provider.protobuf.OptS s1 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *s1_);
    }

    // optional .data_provider.protobuf.OptS s2 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *s2_);
    }

  }
  // .data_provider.protobuf.RptI vi1 = 7;
  if (this->_internal_has_vi1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vi1_);
  }

  // .data_provider.protobuf.RptF vf1 = 9;
  if (this->_internal_has_vf1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vf1_);
  }

  // .data_provider.protobuf.RptS vs1 = 10;
  if (this->_internal_has_vs1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vs1_);
  }

  // .data_provider.protobuf.RptS vs2 = 11;
  if (this->_internal_has_vs2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vs2_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RawCollatItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RawCollatItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RawCollatItem::GetClassData() const { return &_class_data_; }

void RawCollatItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RawCollatItem *>(to)->MergeFrom(
      static_cast<const RawCollatItem &>(from));
}


void RawCollatItem::MergeFrom(const RawCollatItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_provider.protobuf.RawCollatItem)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_i1()->::data_provider::protobuf::OptI::MergeFrom(from._internal_i1());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_i2()->::data_provider::protobuf::OptI::MergeFrom(from._internal_i2());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_f1()->::data_provider::protobuf::OptF::MergeFrom(from._internal_f1());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_f2()->::data_provider::protobuf::OptF::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_s1()->::data_provider::protobuf::OptS::MergeFrom(from._internal_s1());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_s2()->::data_provider::protobuf::OptS::MergeFrom(from._internal_s2());
    }
  }
  if (from._internal_has_vi1()) {
    _internal_mutable_vi1()->::data_provider::protobuf::RptI::MergeFrom(from._internal_vi1());
  }
  if (from._internal_has_vf1()) {
    _internal_mutable_vf1()->::data_provider::protobuf::RptF::MergeFrom(from._internal_vf1());
  }
  if (from._internal_has_vs1()) {
    _internal_mutable_vs1()->::data_provider::protobuf::RptS::MergeFrom(from._internal_vs1());
  }
  if (from._internal_has_vs2()) {
    _internal_mutable_vs2()->::data_provider::protobuf::RptS::MergeFrom(from._internal_vs2());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RawCollatItem::CopyFrom(const RawCollatItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_provider.protobuf.RawCollatItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawCollatItem::IsInitialized() const {
  return true;
}

void RawCollatItem::InternalSwap(RawCollatItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RawCollatItem, vs2_)
      + sizeof(RawCollatItem::vs2_)
      - PROTOBUF_FIELD_OFFSET(RawCollatItem, i1_)>(
          reinterpret_cast<char*>(&i1_),
          reinterpret_cast<char*>(&other->i1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RawCollatItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace data_provider
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::data_provider::protobuf::RawCollatItem* Arena::CreateMaybeMessage< ::data_provider::protobuf::RawCollatItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::data_provider::protobuf::RawCollatItem >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace data_provider {
namespace protobuf {
class RawCollatItem;
struct RawCollatItemDefaultTypeInternal;
extern RawCollatItemDefaultTypeInternal _RawCollatItem_default_instance_;
}  // namespace protobuf
}  // namespace data_provider
PROTOBUF_NAMESPACE_OPEN
template<> ::data_provider::protobuf::RawCollatItem* Arena::CreateMaybeMessage<::data_provider::protobuf::RawCollatItem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace data_provider {
namespace protobuf {

// ===================================================================

class RawCollatItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:data_provider.protobuf.RawCollatItem) */ {
 public:
  inline RawCollatItem() : RawCollatItem(nullptr) {}
  ~RawCollatItem() override;
  explicit constexpr RawCollatItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RawCollatItem(const RawCollatItem& from);
  RawCollatItem(RawCollatItem&& from) noexcept
    : RawCollatItem() {
    *this = ::std::move(from);
  }

  inline RawCollatItem& operator=(const RawCollatItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawCollatItem& operator=(RawCollatItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RawCollatItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const RawCollatItem* internal_default_instance() {
    return reinterpret_cast<const RawCollatItem*>(
               &_RawCollatItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RawCollatItem& a, RawCollatItem& b) {
    a.Swap(&b);
  }
  inline void Swap(RawCollatItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawCollatItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RawCollatItem* New() const final {
    return new RawCollatItem();
  }

  RawCollatItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawCollatItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RawCollatItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RawCollatItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawCollatItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data_provider.protobuf.RawCollatItem";
  }
  protected:
  explicit RawCollatItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kI1FieldNumber = 1,
    kI2FieldNumber = 2,
    kF1FieldNumber = 3,
    kF2FieldNumber = 4,
    kS1FieldNumber = 5,
    kS2FieldNumber = 6,
    kVi1FieldNumber = 7,
    kVf1FieldNumber = 9,
    kVs1FieldNumber = 10,
    kVs2FieldNumber = 11,
  };
  // optional .data_provider.protobuf.OptI i1 = 1;
  bool has_i1() const;
  private:
  bool _internal_has_i1() const;
  public:
  void clear_i1();
  const ::data_provider::protobuf::OptI& i1() const;
  PROTOBUF_MUST_USE_RESULT ::data_provider::protobuf::OptI* release_i1();
  ::data_provider::protobuf::OptI* mutable_i1();
  void set_allocated_i1(::data_provider::protobuf::OptI* i1);
  private:
  const ::data_provider::protobuf::OptI& _internal_i1() const;
  ::data_provider::protobuf::OptI* _internal_mutable_i1();
  public:
  void unsafe_arena_set_allocated_i1(
      ::data_provider::protobuf::OptI* i1);
  ::data_provider::protobuf::OptI* unsafe_arena_release_i1();

  // optional .data_provider.protobuf.OptI i2 = 2;
  bool has_i2() const;
  private:
  bool _internal_has_i2() const;
  public:
  void clear_i2();
  const ::data_provider::protobuf::OptI& i2() const;
  PROTOBUF_MUST_USE_RESULT ::data_provider::protobuf::OptI* release_i2();
  ::data_provider::protobuf::OptI* mutable_i2();
  void set_allocated_i2(::data_provider::protobuf::OptI* i2);
  private:
  const ::data_provider::protobuf::OptI& _internal_i2() const;
  ::data_provider::protobuf::OptI* _internal_mutable_i2();
  public:
  void unsafe_arena_set_allocated_i2(
      ::data_provider::protobuf::OptI* i2);
  ::data_provider::protobuf::OptI* unsafe_arena_release_i2();

  // optional .data_provider.protobuf.OptF f1 = 3;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::data_provider::protobuf::OptF& f1() const;
  PROTOBUF_MUST_USE_RESULT ::data_provider::protobuf::OptF* release_f1();
  ::data_provider::protobuf::OptF* mutable_f1();
  void set_allocated_f1(::data_provider::protobuf::OptF* f1);
  private:
  const ::data_provider::protobuf::OptF& _internal_f1() const;
  ::data_provider::protobuf::OptF* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::data_provider::protobuf::OptF* f1);
  ::data_provider::protobuf::OptF* unsafe_arena_release_f1();

  // optional .data_provider.protobuf.OptF f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::data_provider::protobuf::OptF& f2() const;
  PROTOBUF_MUST_USE_RESULT ::data_provider::protobuf::OptF* release_f2();
  ::data_provider::protobuf::OptF* mutable_f2();
  void set_allocated_f2(::data_provider::protobuf::OptF* f2);
  private:
  const ::data_provider::protobuf::OptF& _internal_f2() const;
  ::data_provider::protobuf::OptF* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::data_provider::protobuf::OptF* f2);
  ::data_provider::protobuf::OptF* unsafe_arena_release_f2();

  // optional .data_provider.protobuf.OptS s1 = 5;
  bool has_s1() const;
  private:
  bool _internal_has_s1() const;
  public:
  void clear_s1();
  const ::data_provider::protobuf::OptS& s1() const;
  PROTOBUF_MUST_USE_RESULT ::data_provider::protobuf::OptS* release_s1();
  ::data_provider::protobuf::OptS* mutable_s1();
  void set_allocated_s1(::data_provider::protobuf::OptS* s1);
  private:
  const ::data_provider::protobuf::OptS& _internal_s1() const;
  ::data_provider::protobuf::OptS* _internal_mutable_s1();
  public:
  void unsafe_arena_set_allocated_s1(
      ::data_provider::protobuf::OptS* s1);
  ::data_provider::protobuf::OptS* unsafe_arena_release_s1();

  // optional .data_provider.protobuf.OptS s2 = 6;
  bool has_s2() const;
  private:
  bool _internal_has_s2() const;
  public:
  void clear_s2();
  const ::data_provider::protobuf::OptS& s2() const;
  PROTOBUF_MUST_USE_RESULT ::data_provider::protobuf::OptS* release_s2();
  ::data_provider::protobuf::OptS* mutable_s2();
  void set_allocated_s2(::data_provider::protobuf::OptS* s2);
  private:
  const ::data_provider::protobuf::OptS& _internal_s2() const;
  ::data_provider::protobuf::OptS* _internal_mutable_s2();
  public:
  void unsafe_arena_set_allocated_s2(
      ::data_provider::protobuf::OptS* s2);
  ::data_provider::protobuf::OptS* unsafe_arena_release_s2();

  // .data_provider.protobuf.RptI vi1 = 7;
  bool has_vi1() const;
  private:
  bool _internal_has_vi1() const;
  public:
  void clear_vi1();
  const ::data_provider::protobuf::RptI& vi1() const;
  PROTOBUF_MUST_USE_RESULT ::data_provider::protobuf::RptI* release_vi1();
  ::data_provider::protobuf::RptI* mutable_vi1();
  void set_allocated_vi1(::data_provider::protobuf::RptI* vi1);
  private:
  const ::data_provider::protobuf::RptI& _internal_vi1() const;
  ::data_provider::protobuf::RptI* _internal_mutable_vi1();
  public:
  void unsafe_arena_set_allocated_vi1(
      ::data_provider::protobuf::RptI* vi1);
  ::data_provider::protobuf::RptI* unsafe_arena_release_vi1();

  // .data_provider.protobuf.RptF vf1 = 9;
  bool has_vf1() const;
  private:
  bool _internal_has_vf1() const;
  public:
  void clear_vf1();
  const ::data_provider::protobuf::RptF& vf1() const;
  PROTOBUF_MUST_USE_RESULT ::data_provider::protobuf::RptF* release_vf1();
  ::data_provider::protobuf::RptF* mutable_vf1();
  void set_allocated_vf1(::data_provider::protobuf::RptF* vf1);
  private:
  const ::data_provider::protobuf::RptF& _internal_vf1() const;
  ::data_provider::protobuf::RptF* _internal_mutable_vf1();
  public:
  void unsafe_arena_set_allocated_vf1(
      ::data_provider::protobuf::RptF* vf1);
  ::data_provider::protobuf::RptF* unsafe_arena_release_vf1();

  // .data_provider.protobuf.RptS vs1 = 10;
  bool has_vs1() const;
  private:
  bool _internal_has_vs1() const;
  public:
  void clear_vs1();
  const ::data_provider::protobuf::RptS& vs1() const;
  PROTOBUF_MUST_USE_RESULT ::data_provider::protobuf::RptS* release_vs1();
  ::data_provider::protobuf::RptS* mutable_vs1();
  void set_allocated_vs1(::data_provider::protobuf::RptS* vs1);
  private:
  const ::data_provider::protobuf::RptS& _internal_vs1() const;
  ::data_provider::protobuf::RptS* _internal_mutable_vs1();
  public:
  void unsafe_arena_set_allocated_vs1(
      ::data_provider::protobuf::RptS* vs1);
  ::data_provider::protobuf::RptS* unsafe_arena_release_vs1();

  // .data_provider.protobuf.RptS vs2 = 11;
  bool has_vs2() const;
  private:
  bool _internal_has_vs2() const;
  public:
  void clear_vs2();
  const ::data_provider::protobuf::RptS& vs2() const;
  PROTOBUF_MUST_USE_RESULT ::data_provider::protobuf::RptS* release_vs2();
  ::data_provider::protobuf::RptS* mutable_vs2();
  void set_allocated_vs2(::data_provider::protobuf::RptS* vs2);
  private:
  const ::data_provider::protobuf::RptS& _internal_vs2() const;
  ::data_provider::protobuf::RptS* _internal_mutable_vs2();
  public:
  void unsafe_arena_set_allocated_vs2(
      ::data_provider::protobuf::RptS* vs2);
  ::data_provider::protobuf::RptS* unsafe_arena_release_vs2();

  // @@protoc_insertion_point(class_scope:data_provider.protobuf.RawCollatItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::data_provider::protobuf::OptI* i1_;
  ::data_provider::protobuf::OptI* i2_;
  ::data_provider::protobuf::OptF* f1_;
  ::data_provider::protobuf::OptF* f2_;
  ::data_provider::protobuf::OptS* s1_;
  ::data_provider::protobuf::OptS* s2_;
  ::data_provider::protobuf::RptI* vi1_;
  ::data_provider::protobuf::RptF* vf1_;
  ::data_provider::protobuf::RptS* vs1_;
  ::data_provider::protobuf::RptS* vs2_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RawCollatItem

// optional .data_provider.protobuf.OptI i1 = 1;
inline bool RawCollatItem::_internal_has_i1() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || i1_ != nullptr);
  return value;
}
inline bool RawCollatItem::has_i1() const {
  return _internal_has_i1();
}
inline const ::data_provider::protobuf::OptI& RawCollatItem::_internal_i1() const {
  const ::data_provider::protobuf::OptI* p = i1_;
  return p != nullptr ? *p : reinterpret_cast<const ::data_provider::protobuf::OptI&>(
      ::data_provider::protobuf::_OptI_default_instance_);
}
inline const ::data_provider::protobuf::OptI& RawCollatItem::i1() const {
  // @@protoc_insertion_point(field_get:data_provider.protobuf.RawCollatItem.i1)
  return _internal_i1();
}
inline void RawCollatItem::unsafe_arena_set_allocated_i1(
    ::data_provider::protobuf::OptI* i1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(i1_);
  }
  i1_ = i1;
  if (i1) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:data_provider.protobuf.RawCollatItem.i1)
}
inline ::data_provider::protobuf::OptI* RawCollatItem::release_i1() {
  _has_bits_[0] &= ~0x00000001u;
  ::data_provider::protobuf::OptI* temp = i1_;
  i1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::data_provider::protobuf::OptI* RawCollatItem::unsafe_arena_release_i1() {
  // @@protoc_insertion_point(field_release:data_provider.protobuf.RawCollatItem.i1)
  _has_bits_[0] &= ~0x00000001u;
  ::data_provider::protobuf::OptI* temp = i1_;
  i1_ = nullptr;
  return temp;
}
inline ::data_provider::protobuf::OptI* RawCollatItem::_internal_mutable_i1() {
  _has_bits_[0] |= 0x00000001u;
  if (i1_ == nullptr) {
    auto* p = CreateMaybeMessage<::data_provider::protobuf::OptI>(GetArenaForAllocation());
    i1_ = p;
  }
  return i1_;
}
inline ::data_provider::protobuf::OptI* RawCollatItem::mutable_i1() {
  ::data_provider::protobuf::OptI* _msg = _internal_mutable_i1();
  // @@protoc_insertion_point(field_mutable:data_provider.protobuf.RawCollatItem.i1)
  return _msg;
}
inline void RawCollatItem::set_allocated_i1(::data_provider::protobuf::OptI* i1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(i1_);
  }
  if (i1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(i1));
    if (message_arena != submessage_arena) {
      i1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, i1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  i1_ = i1;
  // @@protoc_insertion_point(field_set_allocated:data_provider.protobuf.RawCollatItem.i1)
}

// optional .data_provider.protobuf.OptI i2 = 2;
inline bool RawCollatItem::_internal_has_i2() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || i2_ != nullptr);
  return value;
}
inline bool RawCollatItem::has_i2() const {
  return _internal_has_i2();
}
inline const ::data_provider::protobuf::OptI& RawCollatItem::_internal_i2() const {
  const ::data_provider::protobuf::OptI* p = i2_;
  return p != nullptr ? *p : reinterpret_cast<const ::data_provider::protobuf::OptI&>(
      ::data_provider::protobuf::_OptI_default_instance_);
}
inline const ::data_provider::protobuf::OptI& RawCollatItem::i2() const {
  // @@protoc_insertion_point(field_get:data_provider.protobuf.RawCollatItem.i2)
  return _internal_i2();
}
inline void RawCollatItem::unsafe_arena_set_allocated_i2(
    ::data_provider::protobuf::OptI* i2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(i2_);
  }
  i2_ = i2;
  if (i2) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:data_provider.protobuf.RawCollatItem.i2)
}
inline ::data_provider::protobuf::OptI* RawCollatItem::release_i2() {
  _has_bits_[0] &= ~0x00000002u;
  ::data_provider::protobuf::OptI* temp = i2_;
  i2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::data_provider::protobuf::OptI* RawCollatItem::unsafe_arena_release_i2() {
  // @@protoc_insertion_point(field_release:data_provider.protobuf.RawCollatItem.i2)
  _has_bits_[0] &= ~0x00000002u;
  ::data_provider::protobuf::OptI* temp = i2_;
  i2_ = nullptr;
  return temp;
}
inline ::data_provider::protobuf::OptI* RawCollatItem::_internal_mutable_i2() {
  _has_bits_[0] |= 0x00000002u;
  if (i2_ == nullptr) {
    auto* p = CreateMaybeMessage<::data_provider::protobuf::OptI>(GetArenaForAllocation());
    i2_ = p;
  }
  return i2_;
}
inline ::data_provider::protobuf::OptI* RawCollatItem::mutable_i2() {
  ::data_provider::protobuf::OptI* _msg = _internal_mutable_i2();
  // @@protoc_insertion_point(field_mutable:data_provider.protobuf.RawCollatItem.i2)
  return _msg;
}
inline void RawCollatItem::set_allocated_i2(::data_provider::protobuf::OptI* i2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(i2_);
  }
  if (i2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(i2));
    if (message_arena != submessage_arena) {
      i2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, i2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  i2_ = i2;
  // @@protoc_insertion_point(field_set_allocated:data_provider.protobuf.RawCollatItem.i2)
}

// optional .data_provider.protobuf.OptF f1 = 3;
inline bool RawCollatItem::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool RawCollatItem::has_f1() const {
  return _internal_has_f1();
}
inline const ::data_provider::protobuf::OptF& RawCollatItem::_internal_f1() const {
  const ::data_provider::protobuf::OptF* p = f1_;
  return p != nullptr ? *p : reinterpret_cast<const ::data_provider::protobuf::OptF&>(
      ::data_provider::protobuf::_OptF_default_instance_);
}
inline const ::data_provider::protobuf::OptF& RawCollatItem::f1() const {
  // @@protoc_insertion_point(field_get:data_provider.protobuf.RawCollatItem.f1)
  return _internal_f1();
}
inline void RawCollatItem::unsafe_arena_set_allocated_f1(
    ::data_provider::protobuf::OptF* f1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f1_);
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:data_provider.protobuf.RawCollatItem.f1)
}
inline ::data_provider::protobuf::OptF* RawCollatItem::release_f1() {
  _has_bits_[0] &= ~0x00000004u;
  ::data_provider::protobuf::OptF* temp = f1_;
  f1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::data_provider::protobuf::OptF* RawCollatItem::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:data_provider.protobuf.RawCollatItem.f1)
  _has_bits_[0] &= ~0x00000004u;
  ::data_provider::protobuf::OptF* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::data_provider::protobuf::OptF* RawCollatItem::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000004u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::data_provider::protobuf::OptF>(GetArenaForAllocation());
    f1_ = p;
  }
  return f1_;
}
inline ::data_provider::protobuf::OptF* RawCollatItem::mutable_f1() {
  ::data_provider::protobuf::OptF* _msg = _internal_mutable_f1();
  // @@protoc_insertion_point(field_mutable:data_provider.protobuf.RawCollatItem.f1)
  return _msg;
}
inline void RawCollatItem::set_allocated_f1(::data_provider::protobuf::OptF* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(f1_);
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f1));
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:data_provider.protobuf.RawCollatItem.f1)
}

// optional .data_provider.protobuf.OptF f2 = 4;
inline bool RawCollatItem::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool RawCollatItem::has_f2() const {
  return _internal_has_f2();
}
inline const ::data_provider::protobuf::OptF& RawCollatItem::_internal_f2() const {
  const ::data_provider::protobuf::OptF* p = f2_;
  return p != nullptr ? *p : reinterpret_cast<const ::data_provider::protobuf::OptF&>(
      ::data_provider::protobuf::_OptF_default_instance_);
}
inline const ::data_provider::protobuf::OptF& RawCollatItem::f2() const {
  // @@protoc_insertion_point(field_get:data_provider.protobuf.RawCollatItem.f2)
  return _internal_f2();
}
inline void RawCollatItem::unsafe_arena_set_allocated_f2(
    ::data_provider::protobuf::OptF* f2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2_);
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:data_provider.protobuf.RawCollatItem.f2)
}
inline ::data_provider::protobuf::OptF* RawCollatItem::release_f2() {
  _has_bits_[0] &= ~0x00000008u;
  ::data_provider::protobuf::OptF* temp = f2_;
  f2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::data_provider::protobuf::OptF* RawCollatItem::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:data_provider.protobuf.RawCollatItem.f2)
  _has_bits_[0] &= ~0x00000008u;
  ::data_provider::protobuf::OptF* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::data_provider::protobuf::OptF* RawCollatItem::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000008u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::data_provider::protobuf::OptF>(GetArenaForAllocation());
    f2_ = p;
  }
  return f2_;
}
inline ::data_provider::protobuf::OptF* RawCollatItem::mutable_f2() {
  ::data_provider::protobuf::OptF* _msg = _internal_mutable_f2();
  // @@protoc_insertion_point(field_mutable:data_provider.protobuf.RawCollatItem.f2)
  return _msg;
}
inline void RawCollatItem::set_allocated_f2(::data_provider::protobuf::OptF* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2_);
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(f2));
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:data_provider.protobuf.RawCollatItem.f2)
}

// optional .data_provider.protobuf.OptS s1 = 5;
inline bool RawCollatItem::_internal_has_s1() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || s1_ != nullptr);
  return value;
}
inline bool RawCollatItem::has_s1() const {
  return _internal_has_s1();
}
inline const ::data_provider::protobuf::OptS& RawCollatItem::_internal_s1() const {
  const ::data_provider::protobuf::OptS* p = s1_;
  return p != nullptr ? *p : reinterpret_cast<const ::data_provider::protobuf::OptS&>(
      ::data_provider::protobuf::_OptS_default_instance_);
}
inline const ::data_provider::protobuf::OptS& RawCollatItem::s1() const {
  // @@protoc_insertion_point(field_get:data_provider.protobuf.RawCollatItem.s1)
  return _internal_s1();
}
inline void RawCollatItem::unsafe_arena_set_allocated_s1(
    ::data_provider::protobuf::OptS* s1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(s1_);
  }
  s1_ = s1;
  if (s1) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:data_provider.protobuf.RawCollatItem.s1)
}
inline ::data_provider::protobuf::OptS* RawCollatItem::release_s1() {
  _has_bits_[0] &= ~0x00000010u;
  ::data_provider::protobuf::OptS* temp = s1_;
  s1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::data_provider::protobuf::OptS* RawCollatItem::unsafe_arena_release_s1() {
  // @@protoc_insertion_point(field_release:data_provider.protobuf.RawCollatItem.s1)
  _has_bits_[0] &= ~0x00000010u;
  ::data_provider::protobuf::OptS* temp = s1_;
  s1_ = nullptr;
  return temp;
}
inline ::data_provider::protobuf::OptS* RawCollatItem::_internal_mutable_s1() {
  _has_bits_[0] |= 0x00000010u;
  if (s1_ == nullptr) {
    auto* p = CreateMaybeMessage<::data_provider::protobuf::OptS>(GetArenaForAllocation());
    s1_ = p;
  }
  return s1_;
}
inline ::data_provider::protobuf::OptS* RawCollatItem::mutable_s1() {
  ::data_provider::protobuf::OptS* _msg = _internal_mutable_s1();
  // @@protoc_insertion_point(field_mutable:data_provider.protobuf.RawCollatItem.s1)
  return _msg;
}
inline void RawCollatItem::set_allocated_s1(::data_provider::protobuf::OptS* s1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(s1_);
  }
  if (s1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(s1));
    if (message_arena != submessage_arena) {
      s1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, s1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  s1_ = s1;
  // @@protoc_insertion_point(field_set_allocated:data_provider.protobuf.RawCollatItem.s1)
}

// optional .data_provider.protobuf.OptS s2 = 6;
inline bool RawCollatItem::_internal_has_s2() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || s2_ != nullptr);
  return value;
}
inline bool RawCollatItem::has_s2() const {
  return _internal_has_s2();
}
inline const ::data_provider::protobuf::OptS& RawCollatItem::_internal_s2() const {
  const ::data_provider::protobuf::OptS* p = s2_;
  return p != nullptr ? *p : reinterpret_cast<const ::data_provider::protobuf::OptS&>(
      ::data_provider::protobuf::_OptS_default_instance_);
}
inline const ::data_provider::protobuf::OptS& RawCollatItem::s2() const {
  // @@protoc_insertion_point(field_get:data_provider.protobuf.RawCollatItem.s2)
  return _internal_s2();
}
inline void RawCollatItem::unsafe_arena_set_allocated_s2(
    ::data_provider::protobuf::OptS* s2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(s2_);
  }
  s2_ = s2;
  if (s2) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:data_provider.protobuf.RawCollatItem.s2)
}
inline ::data_provider::protobuf::OptS* RawCollatItem::release_s2() {
  _has_bits_[0] &= ~0x00000020u;
  ::data_provider::protobuf::OptS* temp = s2_;
  s2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::data_provider::protobuf::OptS* RawCollatItem::unsafe_arena_release_s2() {
  // @@protoc_insertion_point(field_release:data_provider.protobuf.RawCollatItem.s2)
  _has_bits_[0] &= ~0x00000020u;
  ::data_provider::protobuf::OptS* temp = s2_;
  s2_ = nullptr;
  return temp;
}
inline ::data_provider::protobuf::OptS* RawCollatItem::_internal_mutable_s2() {
  _has_bits_[0] |= 0x00000020u;
  if (s2_ == nullptr) {
    auto* p = CreateMaybeMessage<::data_provider::protobuf::OptS>(GetArenaForAllocation());
    s2_ = p;
  }
  return s2_;
}
inline ::data_provider::protobuf::OptS* RawCollatItem::mutable_s2() {
  ::data_provider::protobuf::OptS* _msg = _internal_mutable_s2();
  // @@protoc_insertion_point(field_mutable:data_provider.protobuf.RawCollatItem.s2)
  return _msg;
}
inline void RawCollatItem::set_allocated_s2(::data_provider::protobuf::OptS* s2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(s2_);
  }
  if (s2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(s2));
    if (message_arena != submessage_arena) {
      s2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, s2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  s2_ = s2;
  // @@protoc_insertion_point(field_set_allocated:data_provider.protobuf.RawCollatItem.s2)
}

// .data_provider.protobuf.RptI vi1 = 7;
inline bool RawCollatItem::_internal_has_vi1() const {
  return this != internal_default_instance() && vi1_ != nullptr;
}
inline bool RawCollatItem::has_vi1() const {
  return _internal_has_vi1();
}
inline const ::data_provider::protobuf::RptI& RawCollatItem::_internal_vi1() const {
  const ::data_provider::protobuf::RptI* p = vi1_;
  return p != nullptr ? *p : reinterpret_cast<const ::data_provider::protobuf::RptI&>(
      ::data_provider::protobuf::_RptI_default_instance_);
}
inline const ::data_provider::protobuf::RptI& RawCollatItem::vi1() const {
  // @@protoc_insertion_point(field_get:data_provider.protobuf.RawCollatItem.vi1)
  return _internal_vi1();
}
inline void RawCollatItem::unsafe_arena_set_allocated_vi1(
    ::data_provider::protobuf::RptI* vi1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vi1_);
  }
  vi1_ = vi1;
  if (vi1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:data_provider.protobuf.RawCollatItem.vi1)
}
inline ::data_provider::protobuf::RptI* RawCollatItem::release_vi1() {
  
  ::data_provider::protobuf::RptI* temp = vi1_;
  vi1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::data_provider::protobuf::RptI* RawCollatItem::unsafe_arena_release_vi1() {
  // @@protoc_insertion_point(field_release:data_provider.protobuf.RawCollatItem.vi1)
  
  ::data_provider::protobuf::RptI* temp = vi1_;
  vi1_ = nullptr;
  return temp;
}
inline ::data_provider::protobuf::RptI* RawCollatItem::_internal_mutable_vi1() {
  
  if (vi1_ == nullptr) {
    auto* p = CreateMaybeMessage<::data_provider::protobuf::RptI>(GetArenaForAllocation());
    vi1_ = p;
  }
  return vi1_;
}
inline ::data_provider::protobuf::RptI* RawCollatItem::mutable_vi1() {
  ::data_provider::protobuf::RptI* _msg = _internal_mutable_vi1();
  // @@protoc_insertion_point(field_mutable:data_provider.protobuf.RawCollatItem.vi1)
  return _msg;
}
inline void RawCollatItem::set_allocated_vi1(::data_provider::protobuf::RptI* vi1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vi1_);
  }
  if (vi1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vi1));
    if (message_arena != submessage_arena) {
      vi1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vi1, submessage_arena);
    }
    
  } else {
    
  }
  vi1_ = vi1;
  // @@protoc_insertion_point(field_set_allocated:data_provider.protobuf.RawCollatItem.vi1)
}

// .data_provider.protobuf.RptF vf1 = 9;
inline bool RawCollatItem::_internal_has_vf1() const {
  return this != internal_default_instance() && vf1_ != nullptr;
}
inline bool RawCollatItem::has_vf1() const {
  return _internal_has_vf1();
}
inline const ::data_provider::protobuf::RptF& RawCollatItem::_internal_vf1() const {
  const ::data_provider::protobuf::RptF* p = vf1_;
  return p != nullptr ? *p : reinterpret_cast<const ::data_provider::protobuf::RptF&>(
      ::data_provider::protobuf::_RptF_default_instance_);
}
inline const ::data_provider::protobuf::RptF& RawCollatItem::vf1() const {
  // @@protoc_insertion_point(field_get:data_provider.protobuf.RawCollatItem.vf1)
  return _internal_vf1();
}
inline void RawCollatItem::unsafe_arena_set_allocated_vf1(
    ::data_provider::protobuf::RptF* vf1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vf1_);
  }
  vf1_ = vf1;
  if (vf1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:data_provider.protobuf.RawCollatItem.vf1)
}
inline ::data_provider::protobuf::RptF* RawCollatItem::release_vf1() {
  
  ::data_provider::protobuf::RptF* temp = vf1_;
  vf1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::data_provider::protobuf::RptF* RawCollatItem::unsafe_arena_release_vf1() {
  // @@protoc_insertion_point(field_release:data_provider.protobuf.RawCollatItem.vf1)
  
  ::data_provider::protobuf::RptF* temp = vf1_;
  vf1_ = nullptr;
  return temp;
}
inline ::data_provider::protobuf::RptF* RawCollatItem::_internal_mutable_vf1() {
  
  if (vf1_ == nullptr) {
    auto* p = CreateMaybeMessage<::data_provider::protobuf::RptF>(GetArenaForAllocation());
    vf1_ = p;
  }
  return vf1_;
}
inline ::data_provider::protobuf::RptF* RawCollatItem::mutable_vf1() {
  ::data_provider::protobuf::RptF* _msg = _internal_mutable_vf1();
  // @@protoc_insertion_point(field_mutable:data_provider.protobuf.RawCollatItem.vf1)
  return _msg;
}
inline void RawCollatItem::set_allocated_vf1(::data_provider::protobuf::RptF* vf1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vf1_);
  }
  if (vf1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vf1));
    if (message_arena != submessage_arena) {
      vf1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vf1, submessage_arena);
    }
    
  } else {
    
  }
  vf1_ = vf1;
  // @@protoc_insertion_point(field_set_allocated:data_provider.protobuf.RawCollatItem.vf1)
}

// .data_provider.protobuf.RptS vs1 = 10;
inline bool RawCollatItem::_internal_has_vs1() const {
  return this != internal_default_instance() && vs1_ != nullptr;
}
inline bool RawCollatItem::has_vs1() const {
  return _internal_has_vs1();
}
inline const ::data_provider::protobuf::RptS& RawCollatItem::_internal_vs1() const {
  const ::data_provider::protobuf::RptS* p = vs1_;
  return p != nullptr ? *p : reinterpret_cast<const ::data_provider::protobuf::RptS&>(
      ::data_provider::protobuf::_RptS_default_instance_);
}
inline const ::data_provider::protobuf::RptS& RawCollatItem::vs1() const {
  // @@protoc_insertion_point(field_get:data_provider.protobuf.RawCollatItem.vs1)
  return _internal_vs1();
}
inline void RawCollatItem::unsafe_arena_set_allocated_vs1(
    ::data_provider::protobuf::RptS* vs1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vs1_);
  }
  vs1_ = vs1;
  if (vs1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:data_provider.protobuf.RawCollatItem.vs1)
}
inline ::data_provider::protobuf::RptS* RawCollatItem::release_vs1() {
  
  ::data_provider::protobuf::RptS* temp = vs1_;
  vs1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::data_provider::protobuf::RptS* RawCollatItem::unsafe_arena_release_vs1() {
  // @@protoc_insertion_point(field_release:data_provider.protobuf.RawCollatItem.vs1)
  
  ::data_provider::protobuf::RptS* temp = vs1_;
  vs1_ = nullptr;
  return temp;
}
inline ::data_provider::protobuf::RptS* RawCollatItem::_internal_mutable_vs1() {
  
  if (vs1_ == nullptr) {
    auto* p = CreateMaybeMessage<::data_provider::protobuf::RptS>(GetArenaForAllocation());
    vs1_ = p;
  }
  return vs1_;
}
inline ::data_provider::protobuf::RptS* RawCollatItem::mutable_vs1() {
  ::data_provider::protobuf::RptS* _msg = _internal_mutable_vs1();
  // @@protoc_insertion_point(field_mutable:data_provider.protobuf.RawCollatItem.vs1)
  return _msg;
}
inline void RawCollatItem::set_allocated_vs1(::data_provider::protobuf::RptS* vs1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vs1_);
  }
  if (vs1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vs1));
    if (message_arena != submessage_arena) {
      vs1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vs1, submessage_arena);
    }
    
  } else {
    
  }
  vs1_ = vs1;
  // @@protoc_insertion_point(field_set_allocated:data_provider.protobuf.RawCollatItem.vs1)
}

// .data_provider.protobuf.RptS vs2 = 11;
inline bool RawCollatItem::_internal_has_vs2() const {
  return this != internal_default_instance() && vs2_ != nullptr;
}
inline bool RawCollatItem::has_vs2() const {
  return _internal_has_vs2();
}
inline const ::data_provider::protobuf::RptS& RawCollatItem::_internal_vs2() const {
  const ::data_provider::protobuf::RptS* p = vs2_;
  return p != nullptr ? *p : reinterpret_cast<const ::data_provider::protobuf::RptS&>(
      ::data_provider::protobuf::_RptS_default_instance_);
}
inline const ::data_provider::protobuf::RptS& RawCollatItem::vs2() const {
  // @@protoc_insertion_point(field_get:data_provider.protobuf.RawCollatItem.vs2)
  return _internal_vs2();
}
inline void RawCollatItem::unsafe_arena_set_allocated_vs2(
    ::data_provider::protobuf::RptS* vs2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vs2_);
  }
  vs2_ = vs2;
  if (vs2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:data_provider.protobuf.RawCollatItem.vs2)
}
inline ::data_provider::protobuf::RptS* RawCollatItem::release_vs2() {
  
  ::data_provider::protobuf::RptS* temp = vs2_;
  vs2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::data_provider::protobuf::RptS* RawCollatItem::unsafe_arena_release_vs2() {
  // @@protoc_insertion_point(field_release:data_provider.protobuf.RawCollatItem.vs2)
  
  ::data_provider::protobuf::RptS* temp = vs2_;
  vs2_ = nullptr;
  return temp;
}
inline ::data_provider::protobuf::RptS* RawCollatItem::_internal_mutable_vs2() {
  
  if (vs2_ == nullptr) {
    auto* p = CreateMaybeMessage<::data_provider::protobuf::RptS>(GetArenaForAllocation());
    vs2_ = p;
  }
  return vs2_;
}
inline ::data_provider::protobuf::RptS* RawCollatItem::mutable_vs2() {
  ::data_provider::protobuf::RptS* _msg = _internal_mutable_vs2();
  // @@protoc_insertion_point(field_mutable:data_provider.protobuf.RawCollatItem.vs2)
  return _msg;
}
inline void RawCollatItem::set_allocated_vs2(::data_provider::protobuf::RptS* vs2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vs2_);
  }
  if (vs2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vs2));
    if (message_arena != submessage_arena) {
      vs2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vs2, submessage_arena);
    }
    
  } else {
    
  }
  vs2_ = vs2;
  // @@protoc_insertion_point(field_set_allocated:data_provider.protobuf.RawCollatItem.vs2)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace data_provider

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
